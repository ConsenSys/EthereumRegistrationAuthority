package tech.pegasys.era;

import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.utils.Numeric;
import tech.pegasys.era.internal.AutoGeneratedEra;
import java.math.BigInteger;

/**
 * ERA Java Wrapper Class.
 */
public class EthereumRegistrationAuthority {

    /* ERA Wrapper remote call. */
    private RemoteCall<AutoGeneratedEra> eraAutoGenWrapper;

    /* The actual ERA Wrapper. */
    private AutoGeneratedEra eraAutoGenWrapperReal;

    /**
     * Constructor.
     * @param eraAutoGenWrapper - The Remote Call to the ERA Wrapper.
     */
    public EthereumRegistrationAuthority(RemoteCall<AutoGeneratedEra> eraAutoGenWrapper) {
        this.eraAutoGenWrapper = eraAutoGenWrapper;
    }

    /**
     * Used to check if ERA has been deployed.
     * @return - True if ERA has been deployed, False otherwise.
     */
    public boolean isReady() {
        return eraAutoGenWrapperReal != null;
    }

    /**
     * Deploy ERA. Call after construction of the class, Return if deployment
     * is successful.
     */
    public void waitUntilReady() {
        // Convert from RemoteCall to Concrete Class
        while (true) {
            try {
                eraAutoGenWrapperReal = eraAutoGenWrapper.send();
                break;
            } catch (Exception e) {
            }
        }
    }

    public RemoteCall<TransactionReceipt> addUpdateDomain(String domainName, String domainAuthorityContractAddress,
                                                          String domainInfoContractAddress, String domainOwnerAddress) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.addUpdateDomain(domainHash, domainAuthorityContractAddress,
                domainInfoContractAddress, domainOwnerAddress);
    }

    public RemoteCall<TransactionReceipt> removeDomain(String domainName) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.removeDomain(domainHash);
    }

    public RemoteCall<Boolean> hasDomain(String domainName) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.hasDomain(domainHash);
    }

    public RemoteCall<String> getAuthority(String domainName) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getAuthority(domainHash);
    }

    public RemoteCall<String> getDomainInfo(String domainName) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getDomainInfo(domainHash);
    }

    public RemoteCall<String> getDomainOwner(String domainName) {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getDomainOwner(domainHash);
    }

    public RemoteCall<BigInteger> getVersion() {
        return eraAutoGenWrapperReal.getVersion();
    }

    /**
     * Get the BigInteger representation of given domain name.
     * @param domainName - String of domain name.
     * @return Keccak256 Hash of the given domain name in BigInteger representation.
     */
    private BigInteger getDomainHash(String domainName) {
        return Numeric.decodeQuantity(domainName);
    }
}
