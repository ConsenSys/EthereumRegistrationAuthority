package tech.pegasys.era;

import org.bouncycastle.util.encoders.Hex;
import org.web3j.crypto.Hash;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import tech.pegasys.era.internal.AutoGeneratedEra;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;

/**
 * ERA Java Wrapper Class.
 */
public class EthereumRegistrationAuthority {

    /* The actual ERA Wrapper. */
    private AutoGeneratedEra eraAutoGenWrapperReal;

    /**
     * Constructor.
     * @param eraAutoGenWrapper - The Remote Call to the ERA Wrapper.
     */
    public EthereumRegistrationAuthority(RemoteCall<AutoGeneratedEra> eraAutoGenWrapper) throws Exception {
        eraAutoGenWrapperReal = eraAutoGenWrapper.send();
    }

    /**
     * Constructor.
     * @param eraAutoGenWrapperReal - The actual ERA Wrapper.
     */
    public EthereumRegistrationAuthority(AutoGeneratedEra eraAutoGenWrapperReal) {
        this.eraAutoGenWrapperReal = eraAutoGenWrapperReal;
    }

    /**
     * Get the contract address of the Era.
     * @return - The contract address.
     */
    public String getContractAddress() {
        return eraAutoGenWrapperReal.getContractAddress();
    }

    public TransactionReceipt addUpdateDomain(String domainName, String domainAuthorityContractAddress,
                                                          String domainInfoContractAddress, String domainOwnerAddress) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.addUpdateDomain(domainHash, domainAuthorityContractAddress,
                domainInfoContractAddress, domainOwnerAddress).send();
    }

    public TransactionReceipt removeDomain(String domainName) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.removeDomain(domainHash).send();
    }

    public Boolean hasDomain(String domainName) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.hasDomain(domainHash).send();
    }

    public String getAuthority(String domainName) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getAuthority(domainHash).send();
    }

    public String getDomainInfo(String domainName) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getDomainInfo(domainHash).send();
    }

    public String getDomainOwner(String domainName) throws Exception {
        BigInteger domainHash = getDomainHash(domainName);
        return eraAutoGenWrapperReal.getDomainOwner(domainHash).send();
    }

    public BigInteger getVersion() throws Exception {
        return eraAutoGenWrapperReal.getVersion().send();
    }

    /**
     * Get the BigInteger representation of given domain name.
     * @param domainName - String of domain name.
     * @return Keccak256 Hash of the given domain name in BigInteger representation.
     */
    private BigInteger getDomainHash(String domainName) {
        String hexString = Hash.sha3(Hex.toHexString(domainName.getBytes(StandardCharsets.UTF_8))).substring(2);
        return new BigInteger(hexString, 16);
    }
}
