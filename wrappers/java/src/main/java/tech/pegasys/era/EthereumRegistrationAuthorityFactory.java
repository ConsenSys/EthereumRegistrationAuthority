package tech.pegasys.era;

import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.tx.ReadonlyTransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;
import tech.pegasys.era.internal.*;

public class EthereumRegistrationAuthorityFactory {

    private Web3j web3j;
    private Credentials credentials;
    private ContractGasProvider contractGasProvider;

    public EthereumRegistrationAuthorityFactory(Web3j web3j, Credentials credentials) {
        this.web3j = web3j;
        this.credentials = credentials;
        contractGasProvider = new DefaultGasProvider();
    }

    public EthereumRegistrationAuthorityFactory(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        this.web3j = web3j;
        this.credentials = credentials;
        this.contractGasProvider = contractGasProvider;
    }

    public EthereumRegistrationAuthorityFactory(Web3j web3j) {
        this.web3j = web3j;
        contractGasProvider = new DefaultGasProvider();
    }

    public EthereumRegistrationAuthorityFactory(Web3j web3j, ContractGasProvider contractGasProvider) {
        this.web3j = web3j;
        this.contractGasProvider = contractGasProvider;
    }

    public void setGasProvider(ContractGasProvider contractGasProvider) {
        this.contractGasProvider = contractGasProvider;
    }


    public EthereumRegistrationAuthority deployEra() throws Exception {
        return credentials == null ? null : new EthereumRegistrationAuthority(AutoGeneratedEra.deploy(
                web3j,
                credentials,
                contractGasProvider));
    }

    public EthereumRegistrationAuthority eraAtAddress(String contractAddress) {
        return new EthereumRegistrationAuthority(AutoGeneratedEra.load(
                contractAddress,
                web3j,
                new ReadonlyTransactionManager(web3j, contractAddress),
                contractGasProvider));
    }

    public DomainInfo deployDomainInfo() throws Exception {
        return credentials == null ? null : new DomainInfo(AutoGeneratedDomainInfo.deploy(
                web3j,
                credentials,
                contractGasProvider));
    }

    public DomainInfo domainInfoAtAddress(String contractAddress) {
        return new DomainInfo(AutoGeneratedDomainInfo.load(
                contractAddress,
                web3j,
                new ReadonlyTransactionManager(web3j, contractAddress),
                contractGasProvider));
    }

    public Finder deployFinder() throws Exception {
        return credentials == null ? null : new Finder(AutoGeneratedFinder.deploy(
                web3j,
                credentials,
                contractGasProvider));
    }

    public Finder finderAtAddress(String contractAddress) {
        return new Finder(AutoGeneratedFinder.load(
                contractAddress,
                web3j,
                new ReadonlyTransactionManager(web3j, contractAddress),
                contractGasProvider));
    }
}